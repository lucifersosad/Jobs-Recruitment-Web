import { Alert, Button, Col, Flex, Form, Input, message, Modal, notification, Row, Spin, Tag, Typography } from "antd";
import { useEffect, useRef, useState } from "react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faFile, faFileZipper } from "@fortawesome/free-regular-svg-icons";
import { handleFileChangeCustom } from "../../../helpers/imagesHelper";
import { convertThumbUrl } from "../../../helpers/convertThumbUrl";
import { uploadCV } from "../../../services/clients/user-userApi";
import uploadCloud from "/images/upload-cloud.webp";
import { extractMyCv, suggestBuildMyCv } from "../../../services/clients/myCvsApi";

const MOCK_PROMPTS = [
  "T√¥i l√† sinh vi√™n nƒÉm cu·ªëi t·ªët nghi·ªáp chuy√™n ng√†nh c√¥ng ngh·ªá sinh h·ªçc ƒê·∫°i h·ªçc C√¥ng Ngh·ªá Th√†nh ph·ªë H·ªì Ch√≠ Minh. T√¥i mu·ªën t√¨m m·ªôt c√¥ng vi·ªác li√™n quan ƒë·∫øn qu·∫£n l√Ω ch·∫•t l∆∞·ª£ng ng√†nh ch·∫ø bi·∫øn th·ª±c ph·∫©m. T√¥i ch∆∞a c√≥ kinh nghi·ªám v·ªÅ ng√†nh n√†y, ch·ªâ c√≥ kinh nghi·ªám b√°n h√†ng part-time ·ªü c·ª≠a h√†ng qu·∫ßn √°o th·ªùi trang trong 6 th√°ng.",
  "T√¥i h·ªçc khoa Ng√¥n ng·ªØ Anh tr∆∞·ªùng ƒê·∫°i h·ªçc ThƒÉng Long. T√¥i mu·ªën t√¨m vi·ªác v·ªÅ content marketing. T√¥i c√≥ th·ªÉ l√†m ƒë∆∞·ª£c k·ªãch b·∫£n v√† quay clip Tiktok, vi·∫øt n·ªôi dung qu·∫£ng c√°o Facebook Ads v√† vi·∫øt b√†i PR cho b√°o. T√¥i ƒë√£ c√≥ 6 th√°ng th·ª±c t·∫≠p l√†m content t·∫°i Revu, n·ªÅn t·∫£ng k·∫øt n·ªëi influencer v·ªõi nh√£n h√†ng.",
  "T√¥i c√≥ 1 nƒÉm kinh nghi·ªám th·ª±c t·∫≠p l·∫≠p tr√¨nh Front-end ·ªü FSoft v√† 1 nƒÉm Fresher l·∫≠p tr√¨nh h·ªá th·ªëng Java ·ªü Rikkeisoft. T√¥i mu·ªën t√¨m v·ªã tr√≠ l·∫≠p tr√¨nh vi√™n Full-stack. T√¥i c√≥ th·ªÉ giao ti·∫øp t·ªët b·∫±ng Ti·∫øng Anh.",
  "T√¥i c√≥ 2 nƒÉm kinh nghi·ªám telesale m·∫£ng gi√°o d·ª•c ·ªü c√¥ng ty ILA. T√¥i l√† leader 1 team 3 ng∆∞·ªùi v√† th∆∞·ªùng xuy√™n ƒë·∫°t & v∆∞·ª£t KPI. T√¥i mong mu·ªën t√¨m m·ªôt v·ªã tr√≠ Sale Leader m·ªõi c√πng ng√†nh ho·∫∑c trong m·∫£ng b√°n h√†ng doanh nghi·ªáp (B2B)"
]

const SuggestBuildCvModal = ({ open, setOpen, handleSuggestBuildCv }) => {
  const [filePdf, setFilePdf] = useState(null);
  const [warning, setWarning] = useState(false);
  const [loading, setLoading] = useState(false);
  const [selectedTag, setSelectedTag] = useState("");
  const refFile = useRef(null);
  const [messageApi, contextHolder] = message.useMessage();

  const [form] = Form.useForm();


  const defaultValue = {
    description: "",
  };

  const handleMockPrompt = (tag) => {
    setSelectedTag(tag)
    form.setFieldsValue({description: tag})
  }

  const handleForm = async (values) => {
      // console.log("üöÄ ~ CreateCv ~ values:", values);
      // return;
      setLoading(true);
      try {
        const result = await suggestBuildMyCv(values);
        if (result?.code === 200) {
          console.log("üöÄ ~ handleForm ~ result:", result)
          handleSuggestBuildCv(result?.data)
          messageApi.success({
            type: "success",
            content: result.success,
          });
          setOpen(false)
  
        } else {
          messageApi.error({
            type: "error",
            content: result.error,
          });
        }
      } catch (error) {
        console.log("üöÄ ~ handleForm ~ error:", error);
      }
      setLoading(false);
    };

  return (
    <>
      {contextHolder}
      <Modal
        destroyOnClose
        onCancel={() => setOpen(false)}
        width={"75%"}
        title="G·ª£i √Ω vi·∫øt CV"
        open={open}
        footer={null}
        centered
        // style={{top: 20, backgroundColor: "#000"}}
      >
        <Form
              layout="vertical"
              encType="multipart/form-data"
              onFinish={handleForm}
              form={form}
              initialValues={defaultValue}
            >
              <Row>
                  <Col xs={24}>
                    <Typography.Title level={4}>M√¥ t·∫£ b·∫£n th√¢n</Typography.Title>
                  </Col>
                  <Col xs={24}>
                    <Form.Item
                      label="Vi·∫øt m·ªôt ƒëo·∫°n m√¥ t·∫£ ng·∫Øn gi·ªõi thi·ªáu b·∫£n th√¢n nh∆∞ kinh nghi·ªám l√†m vi·ªác, h·ªçc v·∫•n, v√† v·ªã tr√≠ c√¥ng vi·ªác b·∫°n ƒëang mu·ªën t√¨m ki·∫øm."
                      name="description"
                      rules={[
                        {
                          required: true,
                          message: "Vui L√≤ng Nh·∫≠p M√¥ T·∫£!",
                        },
                      ]}>
                      <Input.TextArea
                        style={{fontSize: 16}}
                        rows={4}
                        minLength={4}
                        placeholder="Nh·∫≠p m√¥ t·∫£ b·∫£n th√¢n"
                      />
                    </Form.Item>
                    <Typography.Title level={5}>Tham kh·∫£o th√™m m·ªôt v√†i v√≠ d·ª• v·ªÅ m·∫´u prompt gi·ªõi thi·ªáu b·∫£n th√¢n ·ªü b√™n d∆∞·ªõi</Typography.Title>
                  </Col>
                </Row>
                <Row>
                  <Col xs={24}>
                    <Flex vertical gap={20}>
                      {MOCK_PROMPTS.map((item, index) => (
                        <Tag.CheckableTag 
                          key={index}
                          checked={selectedTag === item}
                          onChange={() => handleMockPrompt(item)}  
                          className="suggest-prompt-tag"
                        >
                            {item}
                        </Tag.CheckableTag>
                      ))}
                    </Flex>
                  </Col>
                </Row>
                <Row>
                  <Col xs={6} offset={18}>
                    <Form.Item>
                      <Button
                        style={{ marginTop: "40px" }}
                        htmlType="submit"
                        type="primary"
                        block
                        size="large"
                        loading={loading}
                      >
                        Ho√†n Th√†nh
                      </Button>
                    </Form.Item>
                  </Col>
                </Row>
            </Form>
        
      </Modal>
    </>
  );
};
export default SuggestBuildCvModal;
