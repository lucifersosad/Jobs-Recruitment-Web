import { EditOutlined } from "@ant-design/icons";
import { useEffect, useRef, useState } from "react";
import {
  Card,
  Col,
  Form,
  Image,
  Input,
  InputNumber,
  Modal,
  Radio,
  Row,
  Select,
  Spin,
  notification,
} from "antd";
import TinyMce from "../../../components/admins/tinyEditor";
import { LoadingOutlined } from "@ant-design/icons";
import {
  editCategories,
  getTreeCategories,
} from "../../../services/admins/jobsCategoriesApi";
import { SelectTree } from "../../../helpers/selectTree";
import { convertThumbUrl } from "../../../helpers/convertThumbUrl";
import { decData } from "../../../helpers/decData";
import {
  handleCancel,
  handleUpdateDataAccounts,
  handleUpdateDataCategories,
} from "../../../helpers/modelHelper";
import { handleFileChange } from "../../../helpers/imagesHelper";
import { getContentTiny } from "../../../helpers/getContentTinymce";
import { editAdmins } from "../../../services/admins/adminsApi";
import { getAllRoles } from "../../../services/admins/rolesApi";

function FormEdit(props) {
  const { record, fetchApiLoad } = props;

  //Notification
  const [api, contextHolder] = notification.useNotification();
  //Reff
  const tinyMceRef = useRef(null);
  //Sate
  const [fileImage, setFileImage] = useState(null);
  const [loading, setLoading] = useState(false);
  const [isModal, setIsModalOpen] = useState(false);
  const [optionsRole, setOptionsRole] = useState([]);
  //Form
  const [form] = Form.useForm();

  //Function fetch api
  const fetchApi = async () => {
    const records = await getAllRoles();
    const roles = decData(records.data).map((item, index) => ({
      value: item._id,
      label: item.title,
    }));
    setOptionsRole(roles);
  };

  useEffect(() => {
    fetchApi();
  }, []);

  //Function handleForm
  const handleForm = async (valueForm) => {
    try {
      //L·∫•y ra id c·ªßa record
      const id = record._id;
      //Khi m·ªõi ch·∫°y v√†o cho loading = true
      setLoading(true);
      // console.log("üöÄ ~ handleForm ~ valueForm:", valueForm)
      // return;
      const result = await editAdmins(id, valueForm);

      if (result.code === 200) {
        form.resetFields();
        api.success({
          message: `Success`,
          description: (
            <>
              <i>{result.success}</i>
            </>
          ),
        });
      } else {
        api.error({
          message: <span style={{ color: "red" }}>Failed</span>,
          description: (
            <>
              <i>{result.error}</i>
            </>
          ),
        });
      }
    } catch (error) {
      api.error({
        message: <span style={{ color: "red" }}>Failed</span>,
        description: (
          <>
            <i>L·ªói G√¨ ƒê√≥ R·ªìi!</i>
          </>
        ),
      });
    }
    setFileImage(null);
    fetchApiLoad();
    setIsModalOpen(false);
    //Khi ch·∫°y xong ta cho loading = false
    setLoading(false);
  };

  return (
    <>
      {contextHolder}
      {/* //Do ƒëo·∫°n n√†y ta truy·ªÉn form v√† record l√™n ta s·∫Ω kh√¥ng c·∫ßn setDefaultForm n·ªØa v√¨ b√™n handleUpdateDataJobs ƒë√£ setDefaultForm r·ªìi */}
      <span
        onClick={() => handleUpdateDataAccounts(form, setIsModalOpen, record)}
        className="button-edit"
      >
        <EditOutlined />
      </span>
      <Modal
        centered
        title="Ch·ªânh S·ª≠a T√†i Kho·∫£n"
        open={isModal}
        onCancel={() => handleCancel(form, setIsModalOpen)}
        footer={null}
        width={"50%"}
      >
        <Card className="addAccounts">
          {contextHolder}
          <div className="row justify-content-center align-items-center">
            <Spin
              spinning={loading}
              size="large"
              tip={
                <span style={{ color: "#35b9f1", fontSize: "20px" }}>
                  Vui L√≤ng ƒê·ª£i...
                </span>
              }
              indicator={
                <LoadingOutlined
                  style={{
                    fontSize: 36,
                    color: "#35b9f1",
                  }}
                  spin
                />
              }
            >
              <Form
                layout="vertical"
                encType="multipart/form-data"
                onFinish={handleForm}
                form={form}
              >
                <Row gutter={20}>
                  <Col xs={24} lg={12}>
                    <Form.Item
                      label="H·ªç V√† T√™n"
                      name="fullName"
                      rules={[
                        {
                          required: true,
                          message: "Vui L√≤ng Nh·∫≠p H·ªç V√† T√™n!",
                        },
                      ]}
                    >
                      <Input placeholder="Nh·∫≠p H·ªç V√† T√™n" />
                    </Form.Item>
                  </Col>
                  <Col xs={24} lg={12}>
                    <Form.Item
                      label="ƒê·ªãa Ch·ªâ Email"
                      name="email"
                      rules={[
                        {
                          required: true,
                          message: "Vui L√≤ng Nh·∫≠p ƒê·ªãa Ch·ªâ Email!",
                        },
                      ]}
                    >
                      <Input disabled placeholder="Nh·∫≠p ƒê·ªãa Ch·ªâ Email" />
                    </Form.Item>
                  </Col>
                  <Col xs={24} lg={12}>
                    <Form.Item
                      label="S·ªë ƒêi·ªán Tho·∫°i"
                      name="phoneNumber"
                      rules={[
                        {
                          required: true,
                          message: "Vui L√≤ng Nh·∫≠p S·ªë ƒêi·ªán Tho·∫°i!",
                        },
                      ]}
                    >
                      <Input placeholder="Nh·∫≠p S·ªë ƒêi·ªán Tho·∫°i" />
                    </Form.Item>
                  </Col>
                  <Col xs={24} lg={12}>
                    <Form.Item label="M·∫≠t Kh·∫©u" name="password">
                      <Input type="password" placeholder="Nh·∫≠p M·∫≠t Kh·∫©u" />
                    </Form.Item>
                  </Col>
                  <Col xs={24}>
                    <Form.Item
                      label="Gi·ªõi T√≠nh"
                      name="gender"
                      rules={[
                        {
                          required: true,
                          message: "Vui L√≤ng Nh·∫≠p Gi·ªõi T√≠nh!",
                        },
                      ]}
                    >
                      <Radio.Group>
                        <Radio value="Nam">Nam</Radio>
                        <Radio value="Nu">N·ªØ</Radio>
                      </Radio.Group>
                    </Form.Item>
                  </Col>
                  <Col xs={24}>
                    <Form.Item
                      label="ƒê·ªãa Ch·ªâ"
                      name="address"
                      rules={[
                        {
                          required: true,
                          message: "Vui L√≤ng Nh·∫≠p ƒê·ªãa Ch·ªâ!",
                        },
                      ]}
                    >
                      <Input placeholder="Nh·∫≠p ƒê·ªãa Ch·ªâ" />
                    </Form.Item>
                  </Col>
                  <Col xs={24}>
                    <Form.Item
                      label="Vai Tr√≤"
                      name="role_id"
                      rules={[
                        {
                          required: true,
                          message: "Vui L√≤ng Nh·∫≠p Vai Tr√≤!",
                        },
                      ]}
                    >
                      <Select
                        placeholder="Ch·ªçn Vai Tr√≤"
                        options={optionsRole}
                      />
                    </Form.Item>
                  </Col>
                  <Col xs={24}>
                    <Form.Item>
                      <button className="button-submit-admin" type="submit">
                        C·∫≠p Nh·∫≠p
                      </button>
                    </Form.Item>
                  </Col>
                </Row>
              </Form>
            </Spin>
          </div>
        </Card>
      </Modal>
    </>
  );
}
export default FormEdit;
