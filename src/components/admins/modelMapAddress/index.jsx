import { memo, useCallback, useEffect, useState } from "react";
import { handleCancel, handleShowModal } from "../../../helpers/modelHelper";
import { Card, Form, Modal, Select, notification } from "antd";

import {
  getCity,
  getCitySearch,
  getDistrictSearch,
} from "../../../services/admins/headerApi";
import "./modelMapAddress.scss";

import {
  getMapLocationToPlaceId,
  getMapPlaceIdToLocation,
} from "../../../services/admins/mapViewApi";
import MapView from "../mapView/mapView";
import { removeAccents } from "../../../helpers/removeAccents";

function ModelMapAddress(props) {
  const { setObjectAddress, setLocation, color = "#5dcaf9", top = 20 } = props;
  const [isModal, setIsModalOpen] = useState(false);
  //L∆∞u t·ªça ƒë·ªô
  //longitudeAndLatitude[0] l√† longitude
  //longitudeAndLatitude[1] l√† latitude
  const [longitudeAndLatitude, setLongitudeAndLatitude] = useState([0, 0]);

  const [city, setCity] = useState([]);
  const [districts, setDistricts] = useState([]);
  const [wards, setWards] = useState([]);
  const [valueDistricts, setValueDistricts] = useState([]);
  const [valueWards, setValueWards] = useState([]);
  const [coordinates, setCoordinates] = useState([]);
  const [api, contextHolder] = notification.useNotification();

  useEffect(() => {
    const fetchApi = async () => {
      const dataCity = await getCity();
      if (dataCity.code === 200) {
        const options = dataCity.data.map((item) => {
          return {
            value: item.code,
            label: item.name,
          };
        });
        setCity(options);
      }
    };
    fetchApi();
  }, []);

  //Khi ng∆∞·ªùi d√πng select t·ªânh th√†nh th√¨ s·∫Ω l·∫•y ra c√°c qu·∫≠n huy·ªán
  const handleSelectCity = useCallback(async (value) => {
    const dataCitySearch = await getCitySearch(value);
    if (dataCitySearch.code === 200) {
      const options = dataCitySearch.data.map((item) => {
        console.log("üöÄ ~ options ~ item:", item)
        return {
          value: item.code,
          label: item.name_with_type,
        };
      });
      setDistricts(options);

      setValueDistricts(options[0].value);

      setWards([]);

      setValueWards([]);
    }
  }, []);

  const handleSelectDistricts = useCallback(async (value) => {
    setValueDistricts(value);

    const dataDistrictSearch = await getDistrictSearch(value);
    if (dataDistrictSearch.code === 200) {
      const options = dataDistrictSearch.data.map((item) => {
        return {
          value: item.code,
          label: item.name_with_type,
        };
      });
      setWards(options);

      setValueWards(options[0].value);
    }
  }, []);

  const handleSelectWards = useCallback((value) => {
    setValueWards(value);
  }, []);

  //Khi ng∆∞·ªùi d√πng select t·ªânh th√†nh th√¨ s·∫Ω l·∫•y ra c√°c qu·∫≠n huy·ªán
  const handleForm = async (value) => {
    //L·ªçc ra c√°c t·ªânh th√†nh
    const selectedCityItem = city.find((item) => item.value === value.location);
    //L·ªçc ra c√°c qu·∫≠n huy·ªán
    const selectedDistrictsItem = districts.find(
      (item) => item.value === valueDistricts
    );

    const selectedWardsItem = wards.find((item) => item.value === valueWards);
    //N·∫øu kh√¥ng c√≥ t·ªânh th√†nh ho·∫∑c qu·∫≠n huy·ªán th√¨ s·∫Ω kh√¥ng th·ª±c hi·ªán g√¨ c·∫£
    if (!selectedCityItem || !selectedDistrictsItem) {
      return;
    }

    const objectAddress = {
      city: selectedCityItem.label,
      district: selectedDistrictsItem.label,
      ward: selectedWardsItem.label,
    };

    setObjectAddress(objectAddress);

    //N·∫øu c√≥ t·ªânh th√†nh v√† qu·∫≠n huy·ªán th√¨ s·∫Ω l·∫•y ra ƒë·ªãa ch·ªâ
    const searchValue = `${selectedDistrictsItem.label}, ${selectedCityItem.label}`;
    //L·∫•y ra place_id c·ªßa ƒë·ªãa ch·ªâ
    const getPlaceIdMap = await getMapPlaceIdToLocation(searchValue);
    //N·∫øu kh√¥ng c√≥ place_id th√¨ s·∫Ω kh√¥ng th·ª±c hi·ªán g√¨ c·∫£
    if (!getPlaceIdMap?.predictions?.length) {
      return;
    }
    //L·∫•y ra place_id
    const place_id = getPlaceIdMap.predictions[0].place_id;
    //L·∫•y ra location b·∫±ng place_id
    const location = await getMapLocationToPlaceId(place_id);
    //N·∫øu kh√¥ng c√≥ location th√¨ s·∫Ω kh√¥ng th·ª±c hi·ªán g√¨ c·∫£
    if (!location?.result?.geometry) {
      return;
    }
    //L·∫•y ra lat v√† lng
    const { lat, lng } = location.result.geometry.location;
    setCoordinates([lat, lng]);
    //Set lat v√† lng
    setLongitudeAndLatitude([lat, lng]);
  };
  const handleSaveLocation = () => {
    if (coordinates.length === 0) {
      api.error({
        message: <span style={{ color: "red" }}>Failed</span>,
        description: (
          <>
            <i>
              {
                "Vui L√≤ng ƒêi·ªÅn ƒê·ªß Th√¥ng Tin ƒê·ªãa Ch·ªâ V√† ·∫§n T√¨m Ki·∫øm ƒê·ªÉ H·ªá Th·ªëng L·∫•y T·ªça ƒê·ªô!"
              }
            </i>
          </>
        ),
      });
      return;
    }
    //Set location cho b√™n addJobs
    setLocation(coordinates);
    //ƒê√≥ng modal
    setIsModalOpen(false);
  };
  return (
    <>
      {contextHolder}
      <span
        onClick={() => handleShowModal("", setIsModalOpen)}
        style={{
          marginLeft: "10px",
          color: color,
          cursor: "pointer",
          fontWeight: "600",
        }}
      >
        Th√™m V·ªã Tr√≠ Map
      </span>
      <Modal
        style={{
          top: top,
        }}
        width={800}
        title="Th√™m V·ªã Tr√≠ Map"
        open={isModal}
        onCancel={() => handleCancel("", setIsModalOpen)}
        footer={null}
      >
        <Card className="modelMap">
          <Form
            onFinish={handleForm}
            layout="vertical"
            encType="multipart/form-data"
            className="row align-items-center justify-content-center"
          >
            <Form.Item
              className="col-3"
              label="T·ªânh/Th√†nh Ph·ªë"
              name="location" // This is important
              rules={[
                {
                  required: true,
                  message: "Kh√¥ng ƒê∆∞·ª£c ƒê·ªÉ Tr·ªëng!",
                },
              ]}
            >
              <Select
                showSearch
                filterOption={(input, option) =>
                  removeAccents(option.label)
                    .toLowerCase()
                    .includes(removeAccents(input).toLowerCase()) ||
                  removeAccents(option.value)
                    .toLowerCase()
                    .includes(removeAccents(input).toLowerCase())
                }
                style={{
                  width: "100%",
                }}
                placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ..."
                onChange={(value) => handleSelectCity(value)}
                optionLabelProp="label"
                options={city}
              />
            </Form.Item>

            <Form.Item
              className="col-3"
              label="Qu·∫≠n/Huy·ªán"
              rules={[
                {
                  required: true,
                  message: "Kh√¥ng ƒê∆∞·ª£c ƒê·ªÉ Tr·ªëng!",
                },
              ]}
            >
              <Select
                showSearch
                filterOption={(input, option) =>
                  removeAccents(option.label)
                    .toLowerCase()
                    .includes(removeAccents(input).toLowerCase()) ||
                  removeAccents(option.value)
                    .toLowerCase()
                    .includes(removeAccents(input).toLowerCase())
                }
                value={valueDistricts}
                onChange={handleSelectDistricts}
                style={{
                  width: "100%",
                }}
                disabled={districts.length === 0 ? true : false}
                options={districts}
              />
            </Form.Item>

            <Form.Item
              className="col-3"
              label="Ph∆∞·ªùng/X√£"
              rules={[
                {
                  required: true,
                  message: "Kh√¥ng ƒê∆∞·ª£c ƒê·ªÉ Tr·ªëng!",
                },
              ]}
            >
              <Select
                showSearch
                filterOption={(input, option) =>
                  removeAccents(option.label)
                    .toLowerCase()
                    .includes(removeAccents(input).toLowerCase()) ||
                  removeAccents(option.value)
                    .toLowerCase()
                    .includes(removeAccents(input).toLowerCase())
                }
                value={valueWards}
                onChange={handleSelectWards}
                style={{
                  width: "100%",
                }}
                disabled={wards.length === 0 ? true : false}
                options={wards}
              />
            </Form.Item>

            <Form.Item label="T√¨m Ki·∫øm Ngay" className="col-3">
              <button className="button-submit-admin-one" type="submit">
                T√¨m Ki·∫øm
              </button>
            </Form.Item>
          </Form>
          <MapView
            width={"100%"}
            height={"500px"}
            longitudeAndLatitude={longitudeAndLatitude}
            setLongitudeAndLatitude={setLongitudeAndLatitude}
            setCoordinates={setCoordinates}
          />

          <button
            onClick={handleSaveLocation}
            style={{ marginTop: "30px" }}
            className="button-submit-admin"
            type="submit"
          >
            L∆∞u Th√¥ng Tin
          </button>
        </Card>
      </Modal>
    </>
  );
}

const MemoizedModelMapAddress = memo(ModelMapAddress);
export default MemoizedModelMapAddress;
